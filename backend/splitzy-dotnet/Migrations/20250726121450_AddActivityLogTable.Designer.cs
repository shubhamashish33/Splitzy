// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using splitzy_dotnet.Models;

#nullable disable

namespace splitzy_dotnet.Migrations
{
    [DbContext(typeof(SplitzyContext))]
    [Migration("20250726121450_AddActivityLogTable")]
    partial class AddActivityLogTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("splitzy_dotnet.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ExpenseId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("splitzy_dotnet.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("expense_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExpenseId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("PaidByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("paid_by_user_id");

                    b.Property<string>("SplitPer")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("split_per");

                    b.HasKey("ExpenseId")
                        .HasName("expenses_pkey");

                    b.HasIndex("GroupId");

                    b.HasIndex("PaidByUserId");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("splitzy_dotnet.Models.ExpenseSplit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpenseId")
                        .HasColumnType("integer")
                        .HasColumnName("expense_id");

                    b.Property<decimal>("OwedAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("owed_amount");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("expense_splits_pkey");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("UserId");

                    b.ToTable("expense_splits", (string)null);
                });

            modelBuilder.Entity("splitzy_dotnet.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("GroupId")
                        .HasName("groups_pkey");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("splitzy_dotnet.Models.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<DateTime?>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("group_members_pkey");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("group_members", (string)null);
                });

            modelBuilder.Entity("splitzy_dotnet.Models.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<int>("PaidBy")
                        .HasColumnType("integer")
                        .HasColumnName("paid_by");

                    b.Property<int>("PaidTo")
                        .HasColumnType("integer")
                        .HasColumnName("paid_to");

                    b.HasKey("Id")
                        .HasName("settlements_pkey");

                    b.HasIndex("GroupId");

                    b.HasIndex("PaidBy");

                    b.HasIndex("PaidTo");

                    b.ToTable("settlements", (string)null);
                });

            modelBuilder.Entity("splitzy_dotnet.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("splitzy_dotnet.Models.ActivityLog", b =>
                {
                    b.HasOne("splitzy_dotnet.Models.Expense", "Expense")
                        .WithMany()
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("splitzy_dotnet.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("splitzy_dotnet.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("splitzy_dotnet.Models.Expense", b =>
                {
                    b.HasOne("splitzy_dotnet.Models.Group", "Group")
                        .WithMany("Expenses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("expenses_group_id_fkey");

                    b.HasOne("splitzy_dotnet.Models.User", "PaidByUser")
                        .WithMany("Expenses")
                        .HasForeignKey("PaidByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("expenses_paid_by_user_id_fkey");

                    b.Navigation("Group");

                    b.Navigation("PaidByUser");
                });

            modelBuilder.Entity("splitzy_dotnet.Models.ExpenseSplit", b =>
                {
                    b.HasOne("splitzy_dotnet.Models.Expense", "Expense")
                        .WithMany("ExpenseSplits")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("expense_splits_expense_id_fkey");

                    b.HasOne("splitzy_dotnet.Models.User", "User")
                        .WithMany("ExpenseSplits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("expense_splits_user_id_fkey");

                    b.Navigation("Expense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("splitzy_dotnet.Models.GroupMember", b =>
                {
                    b.HasOne("splitzy_dotnet.Models.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_members_group_id_fkey");

                    b.HasOne("splitzy_dotnet.Models.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_members_user_id_fkey");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("splitzy_dotnet.Models.Settlement", b =>
                {
                    b.HasOne("splitzy_dotnet.Models.Group", "Group")
                        .WithMany("Settlements")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("settlements_group_id_fkey");

                    b.HasOne("splitzy_dotnet.Models.User", "PaidByNavigation")
                        .WithMany("SettlementPaidByNavigations")
                        .HasForeignKey("PaidBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("settlements_paid_by_fkey");

                    b.HasOne("splitzy_dotnet.Models.User", "PaidToNavigation")
                        .WithMany("SettlementPaidToNavigations")
                        .HasForeignKey("PaidTo")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("settlements_paid_to_fkey");

                    b.Navigation("Group");

                    b.Navigation("PaidByNavigation");

                    b.Navigation("PaidToNavigation");
                });

            modelBuilder.Entity("splitzy_dotnet.Models.Expense", b =>
                {
                    b.Navigation("ExpenseSplits");
                });

            modelBuilder.Entity("splitzy_dotnet.Models.Group", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("GroupMembers");

                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("splitzy_dotnet.Models.User", b =>
                {
                    b.Navigation("ExpenseSplits");

                    b.Navigation("Expenses");

                    b.Navigation("GroupMembers");

                    b.Navigation("SettlementPaidByNavigations");

                    b.Navigation("SettlementPaidToNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
